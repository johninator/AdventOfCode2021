fn main() {
    
    let ages_initial : Vec<i64> = vec![1,3,1,5,5,1,1,1,5,1,1,1,3,1,1,4,3,1,1,2,2,4,2,1,3,3,2,4,4,4,1,3,1,1,4,3,1,5,5,1,1,3,4,2,1,5,3,4,5,5,2,5,5,1,5,5,2,1,5,1,1,2,1,1,1,4,4,1,3,3,1,5,4,4,3,4,3,3,1,1,3,4,1,5,5,2,5,2,2,4,1,2,5,2,1,2,5,4,1,1,1,1,1,4,1,1,3,1,5,2,5,1,3,1,5,3,3,2,2,1,5,1,1,1,2,1,1,2,1,1,2,1,5,3,5,2,5,2,2,2,1,1,1,5,5,2,2,1,1,3,4,1,1,3,1,3,5,1,4,1,4,1,3,1,4,1,1,1,1,2,1,4,5,4,5,5,2,1,3,1,4,2,5,1,1,3,5,2,1,2,2,5,1,2,2,4,5,2,1,1,1,1,2,2,3,1,5,5,5,3,2,4,2,4,1,5,3,1,4,4,2,4,2,2,4,4,4,4,1,3,4,3,2,1,3,5,3,1,5,5,4,1,5,1,2,4,2,5,4,1,3,3,1,4,1,3,3,3,1,3,1,1,1,1,4,1,2,3,1,3,3,5,2,3,1,1,1,5,5,4,1,2,3,1,3,1,1,4,1,3,2,2,1,1,1,3,4,3,1,3];

    let mut ages_set : [i64; 10] = [0;10];
    for age in ages_initial.iter().copied() {
        ages_set[usize::try_from(age).unwrap()] += 1;
    }

    let mut no_fish = 0;

    for i_round in 0..256 {
      perform_aging(&mut ages_set);
      perform_reproduction(&mut ages_set);
    }

    no_fish = ages_set.iter().sum();
   

    println!("No. of fish: {}", no_fish);
}

fn perform_aging(ages : &mut [i64; 10]) {

    ages[9] = ages[0];
    for i in 0..8 {
        ages[i] = ages[i+1];
    }
}

fn perform_reproduction(ages : &mut [i64; 10]) {
    ages[8] = ages[9]; // new fish
    ages[6] += ages[9]; // old fish
    ages[9] = 0;
}
